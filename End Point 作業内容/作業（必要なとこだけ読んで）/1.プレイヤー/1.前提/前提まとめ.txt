1.タイマー管理
すべてのモーションを1つのタイマーで管理してください。(ミリ秒,ms())
設定の作成の際、一時停止しやすくする為です。
なのでベクトル加算もタイマーが動いていない間はしないように

例　歩き(3モーションの場合)0.2秒たったらモーションを切り替えて0.6秒を超えたらリセットする


2.状態管理
待機　歩き　走り　ジャンプ　攻撃　防御　...etc
など状態を作り、
これが切り替わる度にタイマーをリセットしてモーション管理してください。


こうすればタイマーが動かなければ次のモーションや状態に移行しないので
一時停止や時間に関する処理が楽になります。


すべての状態が他の制約に行けるわけではありません。
例　待機状態→攻撃状態　に移行できるが　攻撃状態→待機状態　には直接いけません
詳しくは状態遷移の制約を見てください。


3.攻撃・魔法の選択について

通常攻撃
Zキー(予定)が押されたときに
装備している装備の種類によって
どの攻撃を行うかを切り替えてください


魔法攻撃

Xキー(予定)が押されたときに
どの魔法が習得されているかで
どの魔法を使うか切り替えてください

注意点
装備はいくらでもあとから簡単に変更出来ますが
魔法は一度スキルポイントを使い(5ポイント消費)
一度習得してしまうと後述する転生か違うゲームデータ以外の方法で
変更することができません



具体的なアルゴリズム

if(Zキー(予定)が押されたとき)
{
    switch(装備)
	{
	    case 拳:
		キャラ.拳モーション();

	
	}
}

if(Xキー(予定)が押されたとき)
{
    switch(魔法)
	{
	    case 火球:
		キャラ.火球モーション();
	
	    case なし:
		
	}
}

このようにしてください。

4.具体的な構造について
攻撃と魔法以外のモーションやステータスが入っている
基礎クラスをはじめに作り
攻撃と魔法のモーションやステータスが入っているクラス
の中に内蔵させます。


5.コントローラー対応について
一番初めに特定のキーで行う行動については先に条件だけ書いておきましょう

例
if(Zキーが押された時 または　Aボタンが押されたとき)
{
	//攻撃
}

この状態で放置
処理ができてからこの中に関数をいれればOK



